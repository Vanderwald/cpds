{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm/es5/build/input-shims.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAwD;AACxD;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sBAAsB,EAAE;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mDAAmD;AACjF,iCAAiC,8BAA8B;AAC/D,iCAAiC,+BAA+B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAY;AACnuCAAuC,sBAAsB;AAC7D;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AAC2B","file":"163.js","sourcesContent":["import { l as pointerCoord } from './chunk-e7816c0b.js';\nvar RELOCATED_KEY = '$ionRelocated';\nfunction relocateInput(componentEl, inputEl, shouldRelocate, inputRelativeY) {\n    if (inputRelativeY === void 0) { inputRelativeY = 0; }\n    if (componentEl[RELOCATED_KEY] === shouldRelocate) {\n        return;\n    }\n    console.debug(\"native-input, hideCaret, shouldHideCaret: \" + shouldRelocate + \", input value: \" + inputEl.value);\n    if (shouldRelocate) {\n        cloneInputComponent(componentEl, inputEl);\n        var doc = componentEl.ownerDocument;\n        var tx = doc.dir === 'rtl' ? 9999 : -9999;\n        inputEl.style.transform = \"translate3d(\" + tx + \"px,\" + inputRelativeY + \"px,0)\";\n    }\n    else {\n        removeClone(componentEl, inputEl);\n    }\n    componentEl[RELOCATED_KEY] = shouldRelocate;\n}\nfunction isFocused(input) {\n    return input === input.ownerDocument.activeElement;\n}\nfunction removeClone(componentEl, inputEl) {\n    if (componentEl && componentEl.parentElement) {\n        Array.from(componentEl.parentElement.querySelectorAll('.cloned-input'))\n            .forEach(function (clon) { return clon.remove(); });\n        componentEl.style.pointerEvents = '';\n    }\n    inputEl.style['transform'] = '';\n    inputEl.style.opacity = '';\n}\nfunction cloneInputComponent(componentEl, inputEl) {\n    var _a, _b;\n    var parentElement = componentEl.parentElement;\n    var doc = componentEl.ownerDocument;\n    if (componentEl && parentElement) {\n        var srcTop = componentEl.offsetTop;\n        var srcLeft = componentEl.offsetLeft;\n        var srcWidth = componentEl.offsetWidth;\n        var srcHeight = componentEl.offsetHeight;\n        var clonedComponentEle = doc.createElement('div');\n        var clonedStyle = clonedComponentEle.style;\n        (_a = clonedComponentEle.classList).add.apply(_a, Array.from(componentEl.classList));\n        clonedComponentEle.classList.add('cloned-input');\n        clonedComponentEle.setAttribute('aria-hidden', 'true');\n        clonedStyle.pointerEvents = 'none';\n        clonedStyle.position = 'absolute';\n        clonedStyle.top = srcTop + 'px';\n        clonedStyle.left = srcLeft + 'px';\n        clonedStyle.width = srcWidth + 'px';\n        clonedStyle.height = srcHeight + 'px';\n        var clonedInputEl = doc.createElement('input');\n        (_b = clonedInputEl.classList).add.apply(_b, Array.from(inputEl.classList));\n        clonedInputEl.value = inputEl.value;\n        clonedInputEl.type = inputEl.type;\n        clonedInputEl.placeholder = inputEl.placeholder;\n        clonedInputEl.tabIndex = -1;\n        clonedComponentEle.appendChild(clonedInputEl);\n        parentElement.appendChild(clonedComponentEle);\n        componentEl.style.pointerEvents = 'none';\n    }\n    inputEl.style.transform = 'scale(0)';\n}\nfunction enableHideCaretOnScroll(componentEl, inputEl, scrollEl) {\n    if (!scrollEl || !inputEl) {\n        return function () { return; };\n    }\n    console.debug('Input: enableHideCaretOnScroll');\n    var scrollHideCaret = function (shouldHideCaret) {\n        if (isFocused(inputEl)) {\n            relocateInput(componentEl, inputEl, shouldHideCaret);\n        }\n    };\n    var onBlur = function () { return relocateInput(componentEl, inputEl, false); };\n    var hideCaret = function () { return scrollHideCaret(true); };\n    var showCaret = function () { return scrollHideCaret(false); };\n    scrollEl.addEventListener('ionScrollStart', hideCaret);\n    scrollEl.addEventListener('ionScrollEnd', showCaret);\n    inputEl.addEventListener('blur', onBlur);\n    return function () {\n        scrollEl.removeEventListener('ionScrollStart', hideCaret);\n        scrollEl.removeEventListener('ionScrollEnd', showCaret);\n        inputEl.addEventListener('ionBlur', onBlur);\n    };\n}\nvar SKIP_SELECTOR = 'input, textarea, [no-blur]';\nfunction enableInputBlurring(doc) {\n    console.debug('Input: enableInputBlurring');\n    var focused = true;\n    var didScroll = false;\n    function onScroll() {\n        didScroll = true;\n    }\n    function onFocusin() {\n        focused = true;\n    }\n    function onTouchend(ev) {\n        if (didScroll) {\n            didScroll = false;\n            return;\n        }\n        var active = doc.activeElement;\n        if (!active) {\n            return;\n        }\n        if (active.matches(SKIP_SELECTOR)) {\n            return;\n        }\n        var tapped = ev.target;\n        if (tapped === active) {\n            return;\n        }\n        if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n            return;\n        }\n        if (tapped.classList.contains('input-cover')) {\n            return;\n        }\n        focused = false;\n        setTimeout(function () {\n            if (!focused) {\n                active.blur();\n            }\n        }, 50);\n    }\n    doc.addEventListener('ionScrollStart', onScroll);\n    doc.addEventListener('focusin', onFocusin, true);\n    doc.addEventListener('touchend', onTouchend, false);\n    return function () {\n        doc.removeEventListener('ionScrollStart', onScroll, true);\n        doc.removeEventListener('focusin', onFocusin, true);\n        doc.removeEventListener('touchend', onTouchend, false);\n    };\n}\nvar SCROLL_ASSIST_SPEED = 0.3;\nfunction getScrollData(componentEl, contentEl, keyboardHeight) {\n    var itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\n    return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, window.innerHeight);\n}\nfunction calcScrollData(inputRect, contentRect, keyboardHeight, plaformHeight) {\n    var inputTop = inputRect.top;\n    var inputBottom = inputRect.bottom;\n    var visibleAreaTop = contentRect.top;\n    var visibleAreaBottom = Math.min(contentRect.bottom, plaformHeight - keyboardHeight);\n    var safeAreaTop = visibleAreaTop + 10;\n    var safeAreaBottom = visibleAreaBottom / 2.0;\n    var distanceToBottom = safeAreaBottom - inputBottom;\n    var distanceToTop = safeAreaTop - inputTop;\n    var scrollAmount = Math.round((distanceToBottom < 0)\n        ? -distanceToBottom\n        : (distanceToTop > 0)\n            ? -distanceToTop\n            : 0);\n    var distance = Math.abs(scrollAmount);\n    var duration = distance / SCROLL_ASSIST_SPEED;\n    var scrollDuration = Math.min(400, Math.max(150, duration));\n    return {\n        scrollAmount: scrollAmount,\n        scrollDuration: scrollDuration,\n        scrollPadding: keyboardHeight,\n        inputSafeY: -(inputTop - safeAreaTop) + 4\n    };\n}\nfunction enableScrollAssist(componentEl, inputEl, contentEl, keyboardHeight) {\n    var coord;\n    var touchStart = function (ev) {\n        coord = pointerCoord(ev);\n        console.debug(\"input-base, pointerStart, type: \" + ev.type);\n    };\n    var touchEnd = function (ev) {\n        console.debug(\"input-base, pointerEnd, type: \" + ev.type);\n        if (!coord) {\n            return;\n        }\n        var endCoord = pointerCoord(ev);\n        if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            jsSetFocus(componentEl, inputEl, contentEl, keyboardHeight);\n        }\n    };\n    componentEl.addEventListener('touchstart', touchStart, true);\n    componentEl.addEventListener('touchend', touchEnd, true);\n    return function () {\n        componentEl.removeEventListener('touchstart', touchStart, true);\n        componentEl.removeEventListener('touchend', touchEnd, true);\n    };\n}\nfunction jsSetFocus(componentEl, inputEl, contentEl, keyboardHeight) {\n    var scrollData = getScrollData(componentEl, contentEl, keyboardHeight);\n    if (Math.abs(scrollData.scrollAmount) < 4) {\n        inputEl.focus();\n        return;\n    }\n    relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n    inputEl.focus();\n    contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration).then(function () {\n        relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n        inputEl.focus();\n    });\n}\nfunction hasPointerMoved(threshold, startCoord, endCoord) {\n    if (startCoord && endCoord) {\n        var deltaX = (startCoord.x - endCoord.x);\n        var deltaY = (startCoord.y - endCoord.y);\n        var distance = deltaX * deltaX + deltaY * deltaY;\n        return distance > (threshold * threshold);\n    }\n    return false;\n}\nvar PADDING_TIMER_KEY = '$ionPaddingTimer';\nfunction enableScrollPadding(doc, keyboardHeight) {\n    console.debug('Input: enableScrollPadding');\n    function onFocusin(ev) {\n        setScrollPadding(ev.target, keyboardHeight);\n    }\n    function onFocusout(ev) {\n        setScrollPadding(ev.target, 0);\n    }\n    doc.addEventListener('focusin', onFocusin);\n    doc.addEventListener('focusout', onFocusout);\n    return function () {\n        doc.removeEventListener('focusin', onFocusin);\n        doc.removeEventListener('focusout', onFocusout);\n    };\n}\nfunction setScrollPadding(input, keyboardHeight) {\n    if (input.tagName !== 'INPUT') {\n        return;\n    }\n    if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n        return;\n    }\n    var el = input.closest('ion-content');\n    if (el === null) {\n        return;\n    }\n    var timer = el[PADDING_TIMER_KEY];\n    if (timer) {\n        clearTimeout(timer);\n    }\n    if (keyboardHeight > 0) {\n        el.style.setProperty('--keyboard-offset', keyboardHeight + \"px\");\n    }\n    else {\n        el[PADDING_TIMER_KEY] = setTimeout(function () {\n            el.style.setProperty('--keyboard-offset', '0px');\n        }, 120);\n    }\n}\nvar INPUT_BLURRING = true;\nvar SCROLL_PADDING = true;\nfunction startInputShims(doc, config) {\n    var keyboardHeight = config.getNumber('keyboardHeight', 290);\n    var scrollAssist = config.getBoolean('scrollAssist', true);\n    var hideCaret = config.getBoolean('hideCaretOnScroll', true);\n    var inputBlurring = config.getBoolean('inputBlurring', true);\n    var scrollPadding = config.getBoolean('scrollPadding', true);\n    var hideCaretMap = new WeakMap();\n    var scrollAssistMap = new WeakMap();\n    function registerInput(componentEl) {\n        var inputEl = (componentEl.shadowRoot || componentEl).querySelector('input');\n        var scrollEl = componentEl.closest('ion-content');\n        if (!inputEl) {\n            return;\n        }\n        if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n            var rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n            hideCaretMap.set(componentEl, rmFn);\n        }\n        if (!!scrollEl && scrollAssist && !scrollAssistMap.has(componentEl)) {\n            var rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, keyboardHeight);\n            scrollAssistMap.set(componentEl, rmFn);\n        }\n    }\n    function unregisterInput(componentEl) {\n        if (hideCaret) {\n            var fn = hideCaretMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            hideCaretMap.delete(componentEl);\n        }\n        if (scrollAssist) {\n            var fn = scrollAssistMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            scrollAssistMap.delete(componentEl);\n        }\n    }\n    if (inputBlurring && INPUT_BLURRING) {\n        enableInputBlurring(doc);\n    }\n    if (scrollPadding && SCROLL_PADDING) {\n        enableScrollPadding(doc, keyboardHeight);\n    }\n    var inputs = Array.from(doc.querySelectorAll('ion-input'));\n    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n        var input = inputs_1[_i];\n        registerInput(input);\n    }\n    doc.body.addEventListener('ionInputDidLoad', function (event) {\n        registerInput(event.target);\n    });\n    doc.body.addEventListener('ionInputDidUnload', function (event) {\n        unregisterInput(event.target);\n    });\n}\nexport { startInputShims };\n"],"sourceRoot":""}